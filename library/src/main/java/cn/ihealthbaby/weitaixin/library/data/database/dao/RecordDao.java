package cn.ihealthbaby.weitaixin.library.data.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.ihealthbaby.weitaixin.library.data.database.dao.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalRecordId = new Property(1, String.class, "localRecordId", false, "LOCAL_RECORD_ID");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property SerialNumber = new Property(4, String.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property UploadState = new Property(5, int.class, "uploadState", false, "UPLOAD_STATE");
        public final static Property RecordStartTime = new Property(6, java.util.Date.class, "recordStartTime", false, "RECORD_START_TIME");
        public final static Property GestationalWeeks = new Property(7, String.class, "gestationalWeeks", false, "GESTATIONAL_WEEKS");
        public final static Property Duration = new Property(8, Integer.class, "duration", false, "DURATION");
        public final static Property RecordData = new Property(9, String.class, "recordData", false, "RECORD_DATA");
        public final static Property SoundPath = new Property(10, String.class, "soundPath", false, "SOUND_PATH");
        public final static Property FeelingId = new Property(11, Integer.class, "feelingId", false, "FEELING_ID");
        public final static Property FeelingString = new Property(12, String.class, "feelingString", false, "FEELING_STRING");
        public final static Property PurposeId = new Property(13, Integer.class, "purposeId", false, "PURPOSE_ID");
        public final static Property PurposeString = new Property(14, String.class, "purposeString", false, "PURPOSE_STRING");
    };

    private DaoSession daoSession;


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOCAL_RECORD_ID\" TEXT NOT NULL UNIQUE ," + // 1: localRecordId
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"USER_NAME\" TEXT NOT NULL ," + // 3: userName
                "\"SERIAL_NUMBER\" TEXT NOT NULL ," + // 4: serialNumber
                "\"UPLOAD_STATE\" INTEGER NOT NULL ," + // 5: uploadState
                "\"RECORD_START_TIME\" INTEGER," + // 6: recordStartTime
                "\"GESTATIONAL_WEEKS\" TEXT," + // 7: gestationalWeeks
                "\"DURATION\" INTEGER," + // 8: duration
                "\"RECORD_DATA\" TEXT," + // 9: recordData
                "\"SOUND_PATH\" TEXT," + // 10: soundPath
                "\"FEELING_ID\" INTEGER," + // 11: feelingId
                "\"FEELING_STRING\" TEXT," + // 12: feelingString
                "\"PURPOSE_ID\" INTEGER," + // 13: purposeId
                "\"PURPOSE_STRING\" TEXT);"); // 14: purposeString
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLocalRecordId());
        stmt.bindLong(3, entity.getUserId());
        stmt.bindString(4, entity.getUserName());
        stmt.bindString(5, entity.getSerialNumber());
        stmt.bindLong(6, entity.getUploadState());
 
        java.util.Date recordStartTime = entity.getRecordStartTime();
        if (recordStartTime != null) {
            stmt.bindLong(7, recordStartTime.getTime());
        }
 
        String gestationalWeeks = entity.getGestationalWeeks();
        if (gestationalWeeks != null) {
            stmt.bindString(8, gestationalWeeks);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(9, duration);
        }
 
        String recordData = entity.getRecordData();
        if (recordData != null) {
            stmt.bindString(10, recordData);
        }
 
        String soundPath = entity.getSoundPath();
        if (soundPath != null) {
            stmt.bindString(11, soundPath);
        }
 
        Integer feelingId = entity.getFeelingId();
        if (feelingId != null) {
            stmt.bindLong(12, feelingId);
        }
 
        String feelingString = entity.getFeelingString();
        if (feelingString != null) {
            stmt.bindString(13, feelingString);
        }
 
        Integer purposeId = entity.getPurposeId();
        if (purposeId != null) {
            stmt.bindLong(14, purposeId);
        }
 
        String purposeString = entity.getPurposeString();
        if (purposeString != null) {
            stmt.bindString(15, purposeString);
        }
    }

    @Override
    protected void attachEntity(Record entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // localRecordId
            cursor.getLong(offset + 2), // userId
            cursor.getString(offset + 3), // userName
            cursor.getString(offset + 4), // serialNumber
            cursor.getInt(offset + 5), // uploadState
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // recordStartTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gestationalWeeks
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // duration
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // recordData
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // soundPath
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // feelingId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // feelingString
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // purposeId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // purposeString
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalRecordId(cursor.getString(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setUserName(cursor.getString(offset + 3));
        entity.setSerialNumber(cursor.getString(offset + 4));
        entity.setUploadState(cursor.getInt(offset + 5));
        entity.setRecordStartTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setGestationalWeeks(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDuration(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setRecordData(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSoundPath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFeelingId(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setFeelingString(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPurposeId(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setPurposeString(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
