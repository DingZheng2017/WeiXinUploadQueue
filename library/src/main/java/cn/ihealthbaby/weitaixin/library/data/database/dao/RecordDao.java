package cn.ihealthbaby.weitaixin.library.data.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalRecordId = new Property(1, String.class, "localRecordId", false, "LOCAL_RECORD_ID");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property RecordStartTime = new Property(4, java.util.Date.class, "recordStartTime", false, "RECORD_START_TIME");
        public final static Property Duration = new Property(5, Long.class, "duration", false, "DURATION");
        public final static Property RecordData = new Property(6, String.class, "recordData", false, "RECORD_DATA");
        public final static Property SoundPath = new Property(7, String.class, "soundPath", false, "SOUND_PATH");
        public final static Property Feeling = new Property(8, Integer.class, "feeling", false, "FEELING");
        public final static Property Purpose = new Property(9, Integer.class, "purpose", false, "PURPOSE");
        public final static Property UploadState = new Property(10, int.class, "uploadState", false, "UPLOAD_STATE");
        public final static Property SerialNumber = new Property(11, String.class, "serialNumber", false, "SERIAL_NUMBER");
    };

    private DaoSession daoSession;


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOCAL_RECORD_ID\" TEXT NOT NULL UNIQUE ," + // 1: localRecordId
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"RECORD_START_TIME\" INTEGER," + // 4: recordStartTime
                "\"DURATION\" INTEGER," + // 5: duration
                "\"RECORD_DATA\" TEXT," + // 6: recordData
                "\"SOUND_PATH\" TEXT," + // 7: soundPath
                "\"FEELING\" INTEGER," + // 8: feeling
                "\"PURPOSE\" INTEGER," + // 9: purpose
                "\"UPLOAD_STATE\" INTEGER NOT NULL ," + // 10: uploadState
                "\"SERIAL_NUMBER\" TEXT NOT NULL );"); // 11: serialNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLocalRecordId());
        stmt.bindLong(3, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        java.util.Date recordStartTime = entity.getRecordStartTime();
        if (recordStartTime != null) {
            stmt.bindLong(5, recordStartTime.getTime());
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(6, duration);
        }
 
        String recordData = entity.getRecordData();
        if (recordData != null) {
            stmt.bindString(7, recordData);
        }
 
        String soundPath = entity.getSoundPath();
        if (soundPath != null) {
            stmt.bindString(8, soundPath);
        }
 
        Integer feeling = entity.getFeeling();
        if (feeling != null) {
            stmt.bindLong(9, feeling);
        }
 
        Integer purpose = entity.getPurpose();
        if (purpose != null) {
            stmt.bindLong(10, purpose);
        }
        stmt.bindLong(11, entity.getUploadState());
        stmt.bindString(12, entity.getSerialNumber());
    }

    @Override
    protected void attachEntity(Record entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // localRecordId
            cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // recordStartTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // duration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // recordData
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // soundPath
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // feeling
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // purpose
            cursor.getInt(offset + 10), // uploadState
            cursor.getString(offset + 11) // serialNumber
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalRecordId(cursor.getString(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecordStartTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDuration(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setRecordData(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSoundPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFeeling(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPurpose(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUploadState(cursor.getInt(offset + 10));
        entity.setSerialNumber(cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
